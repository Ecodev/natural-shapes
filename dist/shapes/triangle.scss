@mixin natural-triangle($color, $w, $h, $angle: 0, $assimetry: 0.5) {
    @include natural-trapezoid($color, $w, 0, $h, $angle, $assimetry);
}

@mixin natural-triangle-equilateral($color, $sideSize, $angle : 0) {
    @include natural-trapezoid($color, $sideSize, 0, $sideSize * 0.866025403784, 0.5, $angle);
}

@mixin natural-triangle-bordered($color, $w, $h, $bColor, $b, $angle: 0, $assimetry: 0.5) {

    $values : natural-trigonometry-basics($w, $h, $b, $assimetry);
    $alpha : map-get($values, alpha);
    $gamma : map-get($values, gamma);
    $l : map-get($values, l);
    $r : map-get($values, r);
    $W : map-get($values, W);

    // new sizes from the symmetry axe
    $L : $W * $assimetry;
    $R : $W * (1 - $assimetry);

    // new height
    $H: null;
    @if ($assimetry > 0) {
        $H: tan($alpha) * $L;
    } @else {
        $H: tan($gamma) * $R;
    }

    $offset : 4 * pow($assimetry - 0.5, 2);
    @if $assimetry > 0.5 {
        $offset :  - $r * $offset;
    } @else {
        $offset : $l * $offset;
    }

    $origin-x: $w * $assimetry + (($l - $b) * $assimetry) + $b;

    // Outer triangle
    @include natural-triangle($bColor, $W, $H, 0, $assimetry);

    position:relative;
    transform-origin: $origin-x 100%;
    transform: rotate($angle);

    // Inner triangle
    &::before {
        position:absolute;
        left: - $w * $assimetry + $offset;
        top: floor($H - $h);
        @include natural-triangle($color, $w, $h, 0, $assimetry);
    }
}
