@mixin natural-trapezoid($color, $baseSize, $ceilingSize, $heightSize, $angle: 0, $assimetry: 0.5) {
    @include shape();

    width: $ceilingSize;
    height: 0;

    $residualSize: $baseSize - $ceilingSize;

    border-right: $residualSize * (1 - $assimetry) solid transparent;
    border-bottom: $heightSize solid $color;
    border-left: $residualSize * $assimetry solid transparent;

    transform-origin: ($baseSize / 2) 100%;
    transform:rotate($angle);
}

@mixin natural-trapezoid-bordered($color, $w, $c, $h, $bColor, $b, $angle: 0, $assimetry: 0.5) {

    $extraWidth : $w - $c;
    $H : $h + $b;

    $values : natural-trigonometry-basics($extraWidth, $h, $b, $assimetry);
    $alpha : map-get($values, alpha);
    $gamma : map-get($values, gamma);
    $l : map-get($values, l);
    $r : map-get($values, r);

    $W : $w + $l + $r;

    // horizontal width between bottom corners and top corners
    $L : $H / tan($alpha);
    $R : $H / tan($gamma);

    @if $assimetry == 0 {
        $L : 0;
    } @elseif $assimetry == 1 {
        $R : 0;
    }

    // new ceiling dimension
    $C : floor($W - $L - $R);

    // Outer trapezoid
    @include natural-trapezoid($bColor, $W, $C, $H, $angle, $assimetry);

    position:relative;

    // Inner trapezoid
    &::before {
        position:absolute;
        top: $b;
        left: -2 * $b * $assimetry + $b;
        @include natural-trapezoid($color, $w, $c, $h, 0, $assimetry);
    }
}
